//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace BikeShop.BicycleChallenge
{
    
    
    /// <summary>
    /// The default implementation of the Bicycle class
    /// </summary>
    [XmlNamespaceAttribute("http://www.fzi.de/MULTI/2017/bicycleChallenge")]
    [XmlNamespacePrefixAttribute("bikes")]
    [ModelRepresentationClassAttribute("http://www.fzi.de/MULTI/2017/bicycleChallenge#//Bicycle")]
    public partial class Bicycle : ModelElement, IBicycle, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SalesPrice property
        /// </summary>
        private double _salesPrice;
        
        private static Lazy<ITypedElement> _salesPriceAttribute = new Lazy<ITypedElement>(RetrieveSalesPriceAttribute);
        
        /// <summary>
        /// The backing field for the PurchasePrice property
        /// </summary>
        private double _purchasePrice;
        
        private static Lazy<ITypedElement> _purchasePriceAttribute = new Lazy<ITypedElement>(RetrievePurchasePriceAttribute);
        
        /// <summary>
        /// The backing field for the Purpose property
        /// </summary>
        private ObservableList<Purpose> _purpose;
        
        private static Lazy<ITypedElement> _purposeAttribute = new Lazy<ITypedElement>(RetrievePurposeAttribute);
        
        private static Lazy<ITypedElement> _frameReference = new Lazy<ITypedElement>(RetrieveFrameReference);
        
        /// <summary>
        /// The backing field for the Frame property
        /// </summary>
        private IFrame _frame;
        
        private static Lazy<ITypedElement> _forkReference = new Lazy<ITypedElement>(RetrieveForkReference);
        
        /// <summary>
        /// The backing field for the Fork property
        /// </summary>
        private IFork _fork;
        
        private static Lazy<ITypedElement> _wheelsReference = new Lazy<ITypedElement>(RetrieveWheelsReference);
        
        /// <summary>
        /// The backing field for the Wheels property
        /// </summary>
        private ObservableCompositionList<IWheel> _wheels;
        
        private static Lazy<ITypedElement> _handleBarReference = new Lazy<ITypedElement>(RetrieveHandleBarReference);
        
        /// <summary>
        /// The backing field for the HandleBar property
        /// </summary>
        private IHandleBar _handleBar;
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static IClass _classInstance;
        
        public Bicycle()
        {
            this._purpose = new ObservableList<Purpose>();
            this._purpose.CollectionChanging += this.PurposeCollectionChanging;
            this._purpose.CollectionChanged += this.PurposeCollectionChanged;
            this._wheels = new ObservableCompositionList<IWheel>(this);
            this._wheels.CollectionChanging += this.WheelsCollectionChanging;
            this._wheels.CollectionChanged += this.WheelsCollectionChanged;
        }
        
        /// <summary>
        /// The SalesPrice property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public double SalesPrice
        {
            get
            {
                return this._salesPrice;
            }
            set
            {
                if ((this._salesPrice != value))
                {
                    double old = this._salesPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSalesPriceChanging(e);
                    this.OnPropertyChanging("SalesPrice", e, _salesPriceAttribute);
                    this._salesPrice = value;
                    this.OnSalesPriceChanged(e);
                    this.OnPropertyChanged("SalesPrice", e, _salesPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PurchasePrice property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public double PurchasePrice
        {
            get
            {
                return this._purchasePrice;
            }
            set
            {
                if ((this._purchasePrice != value))
                {
                    double old = this._purchasePrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPurchasePriceChanging(e);
                    this.OnPropertyChanging("PurchasePrice", e, _purchasePriceAttribute);
                    this._purchasePrice = value;
                    this.OnPurchasePriceChanged(e);
                    this.OnPropertyChanged("PurchasePrice", e, _purchasePriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Purpose property
        /// </summary>
        [LowerBoundAttribute(1)]
        [UpperBoundAttribute(3)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public ICollectionExpression<Purpose> Purpose
        {
            get
            {
                return this._purpose;
            }
        }
        
        /// <summary>
        /// The Frame property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IFrame Frame
        {
            get
            {
                return this._frame;
            }
            set
            {
                if ((this._frame != value))
                {
                    IFrame old = this._frame;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrameChanging(e);
                    this.OnPropertyChanging("Frame", e, _frameReference);
                    this._frame = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetFrame;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFrame;
                    }
                    this.OnFrameChanged(e);
                    this.OnPropertyChanged("Frame", e, _frameReference);
                }
            }
        }
        
        /// <summary>
        /// The Fork property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IFork Fork
        {
            get
            {
                return this._fork;
            }
            set
            {
                if ((this._fork != value))
                {
                    IFork old = this._fork;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnForkChanging(e);
                    this.OnPropertyChanging("Fork", e, _forkReference);
                    this._fork = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetFork;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetFork;
                    }
                    this.OnForkChanged(e);
                    this.OnPropertyChanged("Fork", e, _forkReference);
                }
            }
        }
        
        /// <summary>
        /// The Wheels property
        /// </summary>
        [LowerBoundAttribute(2)]
        [UpperBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public IListExpression<IWheel> Wheels
        {
            get
            {
                return this._wheels;
            }
        }
        
        /// <summary>
        /// The HandleBar property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public IHandleBar HandleBar
        {
            get
            {
                return this._handleBar;
            }
            set
            {
                if ((this._handleBar != value))
                {
                    IHandleBar old = this._handleBar;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHandleBarChanging(e);
                    this.OnPropertyChanging("HandleBar", e, _handleBarReference);
                    this._handleBar = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.ParentChanged -= this.OnResetHandleBar;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.ParentChanged += this.OnResetHandleBar;
                    }
                    this.OnHandleBarChanged(e);
                    this.OnPropertyChanged("HandleBar", e, _handleBarReference);
                }
            }
        }
        
        ICollectionExpression<BikeShop.BicycleChallenge.IComponent> IConfiguration.Components
        {
            get
            {
                return new BicycleComponentsCollection(this);
            }
        }
        
        /// <summary>
        /// The Name property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new BicycleChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BicycleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.fzi.de/MULTI/2017/bicycleChallenge#//Bicycle")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SalesPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SalesPriceChanging;
        
        /// <summary>
        /// Gets fired when the SalesPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SalesPriceChanged;
        
        /// <summary>
        /// Gets fired before the PurchasePrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanging;
        
        /// <summary>
        /// Gets fired when the PurchasePrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanged;
        
        /// <summary>
        /// Gets fired before the Frame property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrameChanging;
        
        /// <summary>
        /// Gets fired when the Frame property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrameChanged;
        
        /// <summary>
        /// Gets fired before the Fork property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForkChanging;
        
        /// <summary>
        /// Gets fired when the Fork property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForkChanged;
        
        /// <summary>
        /// Gets fired before the HandleBar property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HandleBarChanging;
        
        /// <summary>
        /// Gets fired when the HandleBar property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HandleBarChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        private static ITypedElement RetrieveSalesPriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("SalesPrice")));
        }
        
        /// <summary>
        /// Raises the SalesPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSalesPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SalesPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SalesPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSalesPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SalesPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePurchasePriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("PurchasePrice")));
        }
        
        /// <summary>
        /// Raises the PurchasePriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchasePriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchasePriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PurchasePriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchasePriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchasePriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePurposeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("Purpose")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Purpose property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PurposeCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Purpose", e, _purposeAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Purpose property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PurposeCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Purpose", e, _purposeAttribute);
        }
        
        private static ITypedElement RetrieveFrameReference()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("Frame")));
        }
        
        /// <summary>
        /// Raises the FrameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Frame property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFrame(object sender, System.EventArgs eventArgs)
        {
            this.Frame = null;
        }
        
        private static ITypedElement RetrieveForkReference()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("Fork")));
        }
        
        /// <summary>
        /// Raises the ForkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Fork property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFork(object sender, System.EventArgs eventArgs)
        {
            this.Fork = null;
        }
        
        private static ITypedElement RetrieveWheelsReference()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("Wheels")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Wheels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WheelsCollectionChanging(object sender, NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Wheels", e, _wheelsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Wheels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WheelsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Wheels", e, _wheelsReference);
        }
        
        private static ITypedElement RetrieveHandleBarReference()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Bicycle.ClassInstance)).Resolve("HandleBar")));
        }
        
        /// <summary>
        /// Raises the HandleBarChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHandleBarChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HandleBarChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HandleBarChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHandleBarChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HandleBarChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HandleBar property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHandleBar(object sender, System.EventArgs eventArgs)
        {
            this.HandleBar = null;
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.Configuration.ClassInstance)).Resolve("Name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.Frame))
            {
                return ModelHelper.CreatePath("Frame");
            }
            if ((element == this.Fork))
            {
                return ModelHelper.CreatePath("Fork");
            }
            int wheelsIndex = ModelHelper.IndexOfReference(this.Wheels, element);
            if ((wheelsIndex != -1))
            {
                return ModelHelper.CreatePath("Wheels", wheelsIndex);
            }
            if ((element == this.HandleBar))
            {
                return ModelHelper.CreatePath("HandleBar");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "FRAME"))
            {
                return this.Frame;
            }
            if ((reference == "FORK"))
            {
                return this.Fork;
            }
            if ((reference == "WHEELS"))
            {
                if ((index < this.Wheels.Count))
                {
                    return this.Wheels[index];
                }
                else
                {
                    return null;
                }
            }
            if ((reference == "HANDLEBAR"))
            {
                return this.HandleBar;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SALESPRICE"))
            {
                return this.SalesPrice;
            }
            if ((attribute == "PURCHASEPRICE"))
            {
                return this.PurchasePrice;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WHEELS"))
            {
                return this._wheels;
            }
            if ((feature == "PURPOSE"))
            {
                return this._purpose;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FRAME"))
            {
                this.Frame = ((IFrame)(value));
                return;
            }
            if ((feature == "FORK"))
            {
                this.Fork = ((IFork)(value));
                return;
            }
            if ((feature == "HANDLEBAR"))
            {
                this.HandleBar = ((IHandleBar)(value));
                return;
            }
            if ((feature == "SALESPRICE"))
            {
                this.SalesPrice = ((double)(value));
                return;
            }
            if ((feature == "PURCHASEPRICE"))
            {
                this.PurchasePrice = ((double)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Frame"))
            {
                return new FrameProxy(this);
            }
            if ((attribute == "Fork"))
            {
                return new ForkProxy(this);
            }
            if ((attribute == "HandleBar"))
            {
                return new HandleBarProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Frame"))
            {
                return new FrameProxy(this);
            }
            if ((reference == "Fork"))
            {
                return new ForkProxy(this);
            }
            if ((reference == "HandleBar"))
            {
                return new HandleBarProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the property name for the given container
        /// </summary>
        /// <returns>The name of the respective container reference</returns>
        /// <param name="container">The container object</param>
        protected override string GetCompositionName(object container)
        {
            if ((container == this._wheels))
            {
                return "Wheels";
            }
            return base.GetCompositionName(container);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.fzi.de/MULTI/2017/bicycleChallenge#//Bicycle")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Bicycle class
        /// </summary>
        public class BicycleChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Bicycle _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BicycleChildrenCollection(Bicycle parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Frame != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Fork != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Wheels.Count);
                    if ((this._parent.HandleBar != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FrameChanged += this.PropagateValueChanges;
                this._parent.ForkChanged += this.PropagateValueChanges;
                this._parent.Wheels.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HandleBarChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FrameChanged -= this.PropagateValueChanges;
                this._parent.ForkChanged -= this.PropagateValueChanges;
                this._parent.Wheels.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HandleBarChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Frame == null))
                {
                    IFrame frameCasted = item.As<IFrame>();
                    if ((frameCasted != null))
                    {
                        this._parent.Frame = frameCasted;
                        return;
                    }
                }
                if ((this._parent.Fork == null))
                {
                    IFork forkCasted = item.As<IFork>();
                    if ((forkCasted != null))
                    {
                        this._parent.Fork = forkCasted;
                        return;
                    }
                }
                IWheel wheelsCasted = item.As<IWheel>();
                if ((wheelsCasted != null))
                {
                    if ((this._parent.Wheels.Count < 2))
                    {
                        this._parent.Wheels.Add(wheelsCasted);
                    }
                }
                if ((this._parent.HandleBar == null))
                {
                    IHandleBar handleBarCasted = item.As<IHandleBar>();
                    if ((handleBarCasted != null))
                    {
                        this._parent.HandleBar = handleBarCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Frame = null;
                this._parent.Fork = null;
                this._parent.Wheels.Clear();
                this._parent.HandleBar = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Frame))
                {
                    return true;
                }
                if ((item == this._parent.Fork))
                {
                    return true;
                }
                if (this._parent.Wheels.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.HandleBar))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Frame != null))
                {
                    array[arrayIndex] = this._parent.Frame;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Fork != null))
                {
                    array[arrayIndex] = this._parent.Fork;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> wheelsEnumerator = this._parent.Wheels.GetEnumerator();
                try
                {
                    for (
                    ; wheelsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = wheelsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    wheelsEnumerator.Dispose();
                }
                if ((this._parent.HandleBar != null))
                {
                    array[arrayIndex] = this._parent.HandleBar;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Frame == item))
                {
                    this._parent.Frame = null;
                    return true;
                }
                if ((this._parent.Fork == item))
                {
                    this._parent.Fork = null;
                    return true;
                }
                IWheel wheelItem = item.As<IWheel>();
                if (((wheelItem != null) 
                            && this._parent.Wheels.Remove(wheelItem)))
                {
                    return true;
                }
                if ((this._parent.HandleBar == item))
                {
                    this._parent.HandleBar = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Frame).Concat(this._parent.Fork).Concat(this._parent.Wheels).Concat(this._parent.HandleBar).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Bicycle class
        /// </summary>
        public class BicycleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Bicycle _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BicycleReferencedElementsCollection(Bicycle parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Frame != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Fork != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Wheels.Count);
                    if ((this._parent.HandleBar != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FrameChanged += this.PropagateValueChanges;
                this._parent.ForkChanged += this.PropagateValueChanges;
                this._parent.Wheels.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HandleBarChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FrameChanged -= this.PropagateValueChanges;
                this._parent.ForkChanged -= this.PropagateValueChanges;
                this._parent.Wheels.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HandleBarChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Frame == null))
                {
                    IFrame frameCasted = item.As<IFrame>();
                    if ((frameCasted != null))
                    {
                        this._parent.Frame = frameCasted;
                        return;
                    }
                }
                if ((this._parent.Fork == null))
                {
                    IFork forkCasted = item.As<IFork>();
                    if ((forkCasted != null))
                    {
                        this._parent.Fork = forkCasted;
                        return;
                    }
                }
                IWheel wheelsCasted = item.As<IWheel>();
                if ((wheelsCasted != null))
                {
                    if ((this._parent.Wheels.Count < 2))
                    {
                        this._parent.Wheels.Add(wheelsCasted);
                    }
                }
                if ((this._parent.HandleBar == null))
                {
                    IHandleBar handleBarCasted = item.As<IHandleBar>();
                    if ((handleBarCasted != null))
                    {
                        this._parent.HandleBar = handleBarCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Frame = null;
                this._parent.Fork = null;
                this._parent.Wheels.Clear();
                this._parent.HandleBar = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Frame))
                {
                    return true;
                }
                if ((item == this._parent.Fork))
                {
                    return true;
                }
                if (this._parent.Wheels.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.HandleBar))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Frame != null))
                {
                    array[arrayIndex] = this._parent.Frame;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Fork != null))
                {
                    array[arrayIndex] = this._parent.Fork;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> wheelsEnumerator = this._parent.Wheels.GetEnumerator();
                try
                {
                    for (
                    ; wheelsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = wheelsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    wheelsEnumerator.Dispose();
                }
                if ((this._parent.HandleBar != null))
                {
                    array[arrayIndex] = this._parent.HandleBar;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Frame == item))
                {
                    this._parent.Frame = null;
                    return true;
                }
                if ((this._parent.Fork == item))
                {
                    this._parent.Fork = null;
                    return true;
                }
                IWheel wheelItem = item.As<IWheel>();
                if (((wheelItem != null) 
                            && this._parent.Wheels.Remove(wheelItem)))
                {
                    return true;
                }
                if ((this._parent.HandleBar == item))
                {
                    this._parent.HandleBar = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Frame).Concat(this._parent.Fork).Concat(this._parent.Wheels).Concat(this._parent.HandleBar).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SalesPrice property
        /// </summary>
        private sealed class SalesPriceProxy : ModelPropertyChange<IBicycle, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SalesPriceProxy(IBicycle modelElement) : 
                    base(modelElement, "SalesPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.SalesPrice;
                }
                set
                {
                    this.ModelElement.SalesPrice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PurchasePrice property
        /// </summary>
        private sealed class PurchasePriceProxy : ModelPropertyChange<IBicycle, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PurchasePriceProxy(IBicycle modelElement) : 
                    base(modelElement, "PurchasePrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.PurchasePrice;
                }
                set
                {
                    this.ModelElement.PurchasePrice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Frame property
        /// </summary>
        private sealed class FrameProxy : ModelPropertyChange<IBicycle, IFrame>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrameProxy(IBicycle modelElement) : 
                    base(modelElement, "Frame")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFrame Value
            {
                get
                {
                    return this.ModelElement.Frame;
                }
                set
                {
                    this.ModelElement.Frame = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Fork property
        /// </summary>
        private sealed class ForkProxy : ModelPropertyChange<IBicycle, IFork>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ForkProxy(IBicycle modelElement) : 
                    base(modelElement, "Fork")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFork Value
            {
                get
                {
                    return this.ModelElement.Fork;
                }
                set
                {
                    this.ModelElement.Fork = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HandleBar property
        /// </summary>
        private sealed class HandleBarProxy : ModelPropertyChange<IBicycle, IHandleBar>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HandleBarProxy(IBicycle modelElement) : 
                    base(modelElement, "HandleBar")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHandleBar Value
            {
                get
                {
                    return this.ModelElement.HandleBar;
                }
                set
                {
                    this.ModelElement.HandleBar = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IConfiguration, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IConfiguration modelElement) : 
                    base(modelElement, "Name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
    }
}

