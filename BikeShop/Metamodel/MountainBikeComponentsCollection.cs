//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace BikeShop.BicycleChallenge
{
    
    
    /// <summary>
    /// The collection class to implement the refined Components reference for the MountainBike class
    /// </summary>
    public class MountainBikeComponentsCollection : ICollectionExpression<BikeShop.BicycleChallenge.IComponent>, ICollection<BikeShop.BicycleChallenge.IComponent>
    {
        
        private IMountainBike _parent;
        
        /// <summary>
        /// Creates a new instance
        /// </summary>
        public MountainBikeComponentsCollection(IMountainBike parent)
        {
            this._parent = parent;
            parent.FrameChanged += this.HandleValueChange;
            parent.ForkChanged += this.HandleValueChange;
            parent.Wheels.AsNotifiable().CollectionChanged += this.HandleCollectionChange;
            parent.HandleBarChanged += this.HandleValueChange;
            parent.RearSuspensionChanged += this.HandleValueChange;
        }
        
        /// <summary>
        /// Gets the amount of elements contained in this collection
        /// </summary>
        public virtual int Count
        {
            get
            {
                int count = 0;
                if ((this._parent.Frame != null))
                {
                    count = (count + 1);
                }
                if ((this._parent.Fork != null))
                {
                    count = (count + 1);
                }
                count = (count + this._parent.Wheels.Count);
                if ((this._parent.HandleBar != null))
                {
                    count = (count + 1);
                }
                if ((this._parent.RearSuspension != null))
                {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        /// Gets a value indicating that the collection is not read-only
        /// </summary>
        public virtual bool IsReadOnly
        {
            get
            {
                return false;
            }
        }
        
        /// <summary>
        /// Returns that this composed collection is always attached.
        /// </summary>
        public bool IsAttached
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired when the contents of this collection changes
        /// </summary>
        public event NotifyCollectionChangedEventHandler CollectionChanged;
        
        /// <summary>
        /// Fires the CollectionChanged event
        /// </summary>
        protected virtual void OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs)
        {
            System.Collections.Specialized.NotifyCollectionChangedEventHandler handler = this.CollectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private void HandleValueChange(object sender, NMF.Expressions.ValueChangedEventArgs eventArgs)
        {
            System.Collections.Specialized.NotifyCollectionChangedEventArgs collectionEvent = null;
            if ((eventArgs.NewValue != null))
            {
                if ((eventArgs.OldValue != null))
                {
                    collectionEvent = new System.Collections.Specialized.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction.Replace, eventArgs.NewValue, eventArgs.OldValue);
                }
                else
                {
                    collectionEvent = new System.Collections.Specialized.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction.Add, eventArgs.NewValue);
                }
            }
            else
            {
                collectionEvent = new System.Collections.Specialized.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, eventArgs.OldValue);
            }
            this.OnCollectionChanged(collectionEvent);
        }
        
        private void HandleCollectionChange(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs eventArgs)
        {
            this.OnCollectionChanged(eventArgs);
        }
        
        /// <summary>
        /// Adds the given element to the collection
        /// </summary>
        /// <param name="item">The item to add</param>
        public virtual void Add(BikeShop.BicycleChallenge.IComponent item)
        {
            if ((this._parent.Frame == null))
            {
                IFrame frameCasted = item.As<IFrame>();
                if ((frameCasted != null))
                {
                    this._parent.Frame = frameCasted;
                    return;
                }
            }
            if ((this._parent.Fork == null))
            {
                IFork forkCasted = item.As<IFork>();
                if ((forkCasted != null))
                {
                    this._parent.Fork = forkCasted;
                    return;
                }
            }
            IWheel wheelsCasted = item.As<IWheel>();
            if ((wheelsCasted != null))
            {
                if ((this._parent.Wheels.Count < 2))
                {
                    this._parent.Wheels.Add(wheelsCasted);
                }
            }
            if ((this._parent.HandleBar == null))
            {
                IHandleBar handleBarCasted = item.As<IHandleBar>();
                if ((handleBarCasted != null))
                {
                    this._parent.HandleBar = handleBarCasted;
                    return;
                }
            }
            if ((this._parent.RearSuspension == null))
            {
                IRearSuspension rearSuspensionCasted = item.As<IRearSuspension>();
                if ((rearSuspensionCasted != null))
                {
                    this._parent.RearSuspension = rearSuspensionCasted;
                    return;
                }
            }
        }
        
        /// <summary>
        /// Clears the collection and resets all references that implement it.
        /// </summary>
        public virtual void Clear()
        {
            this._parent.Frame = null;
            this._parent.Fork = null;
            this._parent.Wheels.Clear();
            this._parent.HandleBar = null;
            this._parent.RearSuspension = null;
        }
        
        /// <summary>
        /// Gets a value indicating whether the given element is contained in the collection
        /// </summary>
        /// <returns>True, if it is contained, otherwise False</returns>
        /// <param name="item">The item that should be looked out for</param>
        public virtual bool Contains(BikeShop.BicycleChallenge.IComponent item)
        {
            if ((item == this._parent.Frame))
            {
                return true;
            }
            if ((item == this._parent.Fork))
            {
                return true;
            }
            if (this._parent.Wheels.Contains(item))
            {
                return true;
            }
            if ((item == this._parent.HandleBar))
            {
                return true;
            }
            if ((item == this._parent.RearSuspension))
            {
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Copies the contents of the collection to the given array starting from the given array index
        /// </summary>
        /// <param name="array">The array in which the elements should be copied</param>
        /// <param name="arrayIndex">The starting index</param>
        public virtual void CopyTo(BikeShop.BicycleChallenge.IComponent[] array, int arrayIndex)
        {
            if ((this._parent.Frame != null))
            {
                array[arrayIndex] = this._parent.Frame;
                arrayIndex = (arrayIndex + 1);
            }
            if ((this._parent.Fork != null))
            {
                array[arrayIndex] = this._parent.Fork;
                arrayIndex = (arrayIndex + 1);
            }
            IEnumerator<BikeShop.BicycleChallenge.IComponent> wheelsEnumerator = this._parent.Wheels.GetEnumerator();
            try
            {
                for (
                ; wheelsEnumerator.MoveNext(); 
                )
                {
                    array[arrayIndex] = wheelsEnumerator.Current;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            finally
            {
                wheelsEnumerator.Dispose();
            }
            if ((this._parent.HandleBar != null))
            {
                array[arrayIndex] = this._parent.HandleBar;
                arrayIndex = (arrayIndex + 1);
            }
            if ((this._parent.RearSuspension != null))
            {
                array[arrayIndex] = this._parent.RearSuspension;
                arrayIndex = (arrayIndex + 1);
            }
        }
        
        /// <summary>
        /// Removes the given item from the collection
        /// </summary>
        /// <returns>True, if the item was removed, otherwise False</returns>
        /// <param name="item">The item that should be removed</param>
        public virtual bool Remove(BikeShop.BicycleChallenge.IComponent item)
        {
            if ((this._parent.Frame == item))
            {
                this._parent.Frame = null;
                return true;
            }
            if ((this._parent.Fork == item))
            {
                this._parent.Fork = null;
                return true;
            }
            IWheel wheelItem = item.As<IWheel>();
            if (((wheelItem != null) 
                        && this._parent.Wheels.Remove(wheelItem)))
            {
                return true;
            }
            if ((this._parent.HandleBar == item))
            {
                this._parent.HandleBar = null;
                return true;
            }
            if ((this._parent.RearSuspension == item))
            {
                this._parent.RearSuspension = null;
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Gets an enumerator that enumerates the collection
        /// </summary>
        /// <returns>A generic enumerator</returns>
        public virtual IEnumerator<BikeShop.BicycleChallenge.IComponent> GetEnumerator()
        {
            return Enumerable.Empty<BikeShop.BicycleChallenge.IComponent>().Concat(this._parent.Frame).Concat(this._parent.Fork).Concat(this._parent.Wheels).Concat(this._parent.HandleBar).Concat(this._parent.RearSuspension).GetEnumerator();
        }
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        
        /// <summary>
        /// Gets an observable version of this collection
        /// </summary>
        public virtual INotifyCollection<BikeShop.BicycleChallenge.IComponent> AsNotifiable()
        {
            return this.WithUpdates();
        }
        
        /// <summary>
        /// Gets an observable version of this collection
        /// </summary>
        INotifyEnumerable<BikeShop.BicycleChallenge.IComponent> IEnumerableExpression<BikeShop.BicycleChallenge.IComponent>.AsNotifiable()
        {
            return this.WithUpdates();
        }
        
        /// <summary>
        /// Gets an observable version of this collection
        /// </summary>
        INotifyEnumerable IEnumerableExpression.AsNotifiable()
        {
            return this.WithUpdates();
        }
        
        /// <summary>
        /// Attaches this collection class
        /// </summary>
        public void Attach()
        {
        }
        
        /// <summary>
        /// Detaches this collection class
        /// </summary>
        public void Detach()
        {
        }
    }
}

