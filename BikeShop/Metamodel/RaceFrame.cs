//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace BikeShop.BicycleChallenge
{
    
    
    /// <summary>
    /// The default implementation of the RaceFrame class
    /// </summary>
    [XmlNamespaceAttribute("http://www.fzi.de/MULTI/2017/bicycleChallenge")]
    [XmlNamespacePrefixAttribute("bikes")]
    [ModelRepresentationClassAttribute("http://www.fzi.de/MULTI/2017/bicycleChallenge#//RaceFrame")]
    public partial class RaceFrame : Frame, IRaceFrame, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TopTubeLength property
        /// </summary>
        private double _topTubeLength;
        
        private static Lazy<ITypedElement> _topTubeLengthAttribute = new Lazy<ITypedElement>(RetrieveTopTubeLengthAttribute);
        
        /// <summary>
        /// The backing field for the DownTubeLength property
        /// </summary>
        private double _downTubeLength;
        
        private static Lazy<ITypedElement> _downTubeLengthAttribute = new Lazy<ITypedElement>(RetrieveDownTubeLengthAttribute);
        
        /// <summary>
        /// The backing field for the SeatTubeLength property
        /// </summary>
        private double _seatTubeLength;
        
        private static Lazy<ITypedElement> _seatTubeLengthAttribute = new Lazy<ITypedElement>(RetrieveSeatTubeLengthAttribute);
        
        /// <summary>
        /// The backing field for the Material property
        /// </summary>
        private Material _material;
        
        private static Lazy<ITypedElement> _materialAttribute = new Lazy<ITypedElement>(RetrieveMaterialAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The TopTubeLength property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public double TopTubeLength
        {
            get
            {
                return this._topTubeLength;
            }
            set
            {
                if ((this._topTubeLength != value))
                {
                    double old = this._topTubeLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTopTubeLengthChanging(e);
                    this.OnPropertyChanging("TopTubeLength", e, _topTubeLengthAttribute);
                    this._topTubeLength = value;
                    this.OnTopTubeLengthChanged(e);
                    this.OnPropertyChanged("TopTubeLength", e, _topTubeLengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DownTubeLength property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public double DownTubeLength
        {
            get
            {
                return this._downTubeLength;
            }
            set
            {
                if ((this._downTubeLength != value))
                {
                    double old = this._downTubeLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDownTubeLengthChanging(e);
                    this.OnPropertyChanging("DownTubeLength", e, _downTubeLengthAttribute);
                    this._downTubeLength = value;
                    this.OnDownTubeLengthChanged(e);
                    this.OnPropertyChanged("DownTubeLength", e, _downTubeLengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SeatTubeLength property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public double SeatTubeLength
        {
            get
            {
                return this._seatTubeLength;
            }
            set
            {
                if ((this._seatTubeLength != value))
                {
                    double old = this._seatTubeLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSeatTubeLengthChanging(e);
                    this.OnPropertyChanging("SeatTubeLength", e, _seatTubeLengthAttribute);
                    this._seatTubeLength = value;
                    this.OnSeatTubeLengthChanged(e);
                    this.OnPropertyChanged("SeatTubeLength", e, _seatTubeLengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Material property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Material Material
        {
            get
            {
                return this._material;
            }
            set
            {
                if ((this._material != value))
                {
                    Material old = this._material;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaterialChanging(e);
                    this.OnPropertyChanging("Material", e, _materialAttribute);
                    this._material = value;
                    this.OnMaterialChanged(e);
                    this.OnPropertyChanged("Material", e, _materialAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.fzi.de/MULTI/2017/bicycleChallenge#//RaceFrame")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TopTubeLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopTubeLengthChanging;
        
        /// <summary>
        /// Gets fired when the TopTubeLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TopTubeLengthChanged;
        
        /// <summary>
        /// Gets fired before the DownTubeLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DownTubeLengthChanging;
        
        /// <summary>
        /// Gets fired when the DownTubeLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DownTubeLengthChanged;
        
        /// <summary>
        /// Gets fired before the SeatTubeLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeatTubeLengthChanging;
        
        /// <summary>
        /// Gets fired when the SeatTubeLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeatTubeLengthChanged;
        
        /// <summary>
        /// Gets fired before the Material property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialChanging;
        
        /// <summary>
        /// Gets fired when the Material property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialChanged;
        
        private static ITypedElement RetrieveTopTubeLengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.RaceFrame.ClassInstance)).Resolve("TopTubeLength")));
        }
        
        /// <summary>
        /// Raises the TopTubeLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopTubeLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopTubeLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TopTubeLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTopTubeLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TopTubeLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDownTubeLengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.RaceFrame.ClassInstance)).Resolve("DownTubeLength")));
        }
        
        /// <summary>
        /// Raises the DownTubeLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDownTubeLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DownTubeLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DownTubeLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDownTubeLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DownTubeLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSeatTubeLengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.RaceFrame.ClassInstance)).Resolve("SeatTubeLength")));
        }
        
        /// <summary>
        /// Raises the SeatTubeLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeatTubeLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeatTubeLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeatTubeLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeatTubeLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeatTubeLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaterialAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.RaceFrame.ClassInstance)).Resolve("Material")));
        }
        
        /// <summary>
        /// Raises the MaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TOPTUBELENGTH"))
            {
                return this.TopTubeLength;
            }
            if ((attribute == "DOWNTUBELENGTH"))
            {
                return this.DownTubeLength;
            }
            if ((attribute == "SEATTUBELENGTH"))
            {
                return this.SeatTubeLength;
            }
            if ((attribute == "MATERIAL"))
            {
                return this.Material;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOPTUBELENGTH"))
            {
                this.TopTubeLength = ((double)(value));
                return;
            }
            if ((feature == "DOWNTUBELENGTH"))
            {
                this.DownTubeLength = ((double)(value));
                return;
            }
            if ((feature == "SEATTUBELENGTH"))
            {
                this.SeatTubeLength = ((double)(value));
                return;
            }
            if ((feature == "MATERIAL"))
            {
                this.Material = ((Material)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.fzi.de/MULTI/2017/bicycleChallenge#//RaceFrame")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TopTubeLength property
        /// </summary>
        private sealed class TopTubeLengthProxy : ModelPropertyChange<IRaceFrame, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TopTubeLengthProxy(IRaceFrame modelElement) : 
                    base(modelElement, "TopTubeLength")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.TopTubeLength;
                }
                set
                {
                    this.ModelElement.TopTubeLength = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DownTubeLength property
        /// </summary>
        private sealed class DownTubeLengthProxy : ModelPropertyChange<IRaceFrame, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DownTubeLengthProxy(IRaceFrame modelElement) : 
                    base(modelElement, "DownTubeLength")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.DownTubeLength;
                }
                set
                {
                    this.ModelElement.DownTubeLength = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SeatTubeLength property
        /// </summary>
        private sealed class SeatTubeLengthProxy : ModelPropertyChange<IRaceFrame, double>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SeatTubeLengthProxy(IRaceFrame modelElement) : 
                    base(modelElement, "SeatTubeLength")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override double Value
            {
                get
                {
                    return this.ModelElement.SeatTubeLength;
                }
                set
                {
                    this.ModelElement.SeatTubeLength = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Material property
        /// </summary>
        private sealed class MaterialProxy : ModelPropertyChange<IRaceFrame, Material>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaterialProxy(IRaceFrame modelElement) : 
                    base(modelElement, "Material")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Material Value
            {
                get
                {
                    return this.ModelElement.Material;
                }
                set
                {
                    this.ModelElement.Material = value;
                }
            }
        }
    }
}

