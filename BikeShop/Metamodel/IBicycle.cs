//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace BikeShop.BicycleChallenge
{
    
    
    /// <summary>
    /// The public interface for Bicycle
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Bicycle))]
    [XmlDefaultImplementationTypeAttribute(typeof(Bicycle))]
    public interface IBicycle : IModelElement, IConfiguration
    {
        
        /// <summary>
        /// The SalesPrice property
        /// </summary>
        double SalesPrice
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PurchasePrice property
        /// </summary>
        double PurchasePrice
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Purpose property
        /// </summary>
        ICollectionExpression<Purpose> Purpose
        {
            get;
        }
        
        /// <summary>
        /// The Frame property
        /// </summary>
        IFrame Frame
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Fork property
        /// </summary>
        IFork Fork
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Wheels property
        /// </summary>
        IListExpression<IWheel> Wheels
        {
            get;
        }
        
        /// <summary>
        /// The HandleBar property
        /// </summary>
        IHandleBar HandleBar
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the SalesPrice property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SalesPriceChanging;
        
        /// <summary>
        /// Gets fired when the SalesPrice property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SalesPriceChanged;
        
        /// <summary>
        /// Gets fired before the PurchasePrice property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanging;
        
        /// <summary>
        /// Gets fired when the PurchasePrice property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanged;
        
        /// <summary>
        /// Gets fired before the Frame property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrameChanging;
        
        /// <summary>
        /// Gets fired when the Frame property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrameChanged;
        
        /// <summary>
        /// Gets fired before the Fork property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForkChanging;
        
        /// <summary>
        /// Gets fired when the Fork property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForkChanged;
        
        /// <summary>
        /// Gets fired before the HandleBar property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HandleBarChanging;
        
        /// <summary>
        /// Gets fired when the HandleBar property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HandleBarChanged;
    }
}

