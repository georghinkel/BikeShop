//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace BikeShop.BicycleChallenge
{
    
    
    /// <summary>
    /// The default implementation of the BikeInStock class
    /// </summary>
    [XmlNamespaceAttribute("http://www.fzi.de/MULTI/2017/bicycleChallenge")]
    [XmlNamespacePrefixAttribute("bikes")]
    [ModelRepresentationClassAttribute("http://www.fzi.de/MULTI/2017/bicycleChallenge#//BikeInStock")]
    public partial class BikeInStock : ModelElement, IBikeInStock, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DiscountedPrice property
        /// </summary>
        private Nullable<double> _discountedPrice;
        
        private static Lazy<ITypedElement> _discountedPriceAttribute = new Lazy<ITypedElement>(RetrieveDiscountedPriceAttribute);
        
        private static Lazy<ITypedElement> _modelReference = new Lazy<ITypedElement>(RetrieveModelReference);
        
        /// <summary>
        /// The backing field for the Model property
        /// </summary>
        private IBicycle _model;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The DiscountedPrice property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> DiscountedPrice
        {
            get
            {
                return this._discountedPrice;
            }
            set
            {
                if ((this._discountedPrice != value))
                {
                    Nullable<double> old = this._discountedPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiscountedPriceChanging(e);
                    this.OnPropertyChanging("DiscountedPrice", e, _discountedPriceAttribute);
                    this._discountedPrice = value;
                    this.OnDiscountedPriceChanged(e);
                    this.OnPropertyChanged("DiscountedPrice", e, _discountedPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Model property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IBicycle Model
        {
            get
            {
                return this._model;
            }
            set
            {
                if ((this._model != value))
                {
                    IBicycle old = this._model;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModelChanging(e);
                    this.OnPropertyChanging("Model", e, _modelReference);
                    this._model = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetModel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetModel;
                    }
                    this.OnModelChanged(e);
                    this.OnPropertyChanged("Model", e, _modelReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BikeInStockReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.fzi.de/MULTI/2017/bicycleChallenge#//BikeInStock")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DiscountedPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscountedPriceChanging;
        
        /// <summary>
        /// Gets fired when the DiscountedPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscountedPriceChanged;
        
        /// <summary>
        /// Gets fired before the Model property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelChanging;
        
        /// <summary>
        /// Gets fired when the Model property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelChanged;
        
        private static ITypedElement RetrieveDiscountedPriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.BikeInStock.ClassInstance)).Resolve("DiscountedPrice")));
        }
        
        /// <summary>
        /// Raises the DiscountedPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscountedPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscountedPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiscountedPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscountedPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscountedPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveModelReference()
        {
            return ((ITypedElement)(((ModelElement)(BikeShop.BicycleChallenge.BikeInStock.ClassInstance)).Resolve("Model")));
        }
        
        /// <summary>
        /// Raises the ModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Model property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetModel(object sender, System.EventArgs eventArgs)
        {
            this.Model = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DISCOUNTEDPRICE"))
            {
                return this.DiscountedPrice;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MODEL"))
            {
                this.Model = ((IBicycle)(value));
                return;
            }
            if ((feature == "DISCOUNTEDPRICE"))
            {
                this.DiscountedPrice = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Model"))
            {
                return new ModelProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Model"))
            {
                return new ModelProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.fzi.de/MULTI/2017/bicycleChallenge#//BikeInStock")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BikeInStock class
        /// </summary>
        public class BikeInStockReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BikeInStock _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BikeInStockReferencedElementsCollection(BikeInStock parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Model != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ModelChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ModelChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Model == null))
                {
                    IBicycle modelCasted = item.As<IBicycle>();
                    if ((modelCasted != null))
                    {
                        this._parent.Model = modelCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Model = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Model))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Model != null))
                {
                    array[arrayIndex] = this._parent.Model;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Model == item))
                {
                    this._parent.Model = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Model).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DiscountedPrice property
        /// </summary>
        private sealed class DiscountedPriceProxy : ModelPropertyChange<IBikeInStock, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiscountedPriceProxy(IBikeInStock modelElement) : 
                    base(modelElement, "DiscountedPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.DiscountedPrice;
                }
                set
                {
                    this.ModelElement.DiscountedPrice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Model property
        /// </summary>
        private sealed class ModelProxy : ModelPropertyChange<IBikeInStock, IBicycle>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModelProxy(IBikeInStock modelElement) : 
                    base(modelElement, "Model")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBicycle Value
            {
                get
                {
                    return this.ModelElement.Model;
                }
                set
                {
                    this.ModelElement.Model = value;
                }
            }
        }
    }
}

